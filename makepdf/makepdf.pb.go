// Code generated by protoc-gen-go. DO NOT EDIT.
// source: makepdf.proto

package makepdf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Pong struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba64ad676e34f5a, []int{0}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PDFParams struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Delay                int32    `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	JavascriptReadyFlag  string   `protobuf:"bytes,3,opt,name=javascriptReadyFlag,proto3" json:"javascriptReadyFlag,omitempty"`
	IsDebug              bool     `protobuf:"varint,4,opt,name=isDebug,proto3" json:"isDebug,omitempty"`
	IsMarginless         bool     `protobuf:"varint,5,opt,name=isMarginless,proto3" json:"isMarginless,omitempty"`
	IsLandscape          bool     `protobuf:"varint,6,opt,name=isLandscape,proto3" json:"isLandscape,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PDFParams) Reset()         { *m = PDFParams{} }
func (m *PDFParams) String() string { return proto.CompactTextString(m) }
func (*PDFParams) ProtoMessage()    {}
func (*PDFParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba64ad676e34f5a, []int{1}
}

func (m *PDFParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PDFParams.Unmarshal(m, b)
}
func (m *PDFParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PDFParams.Marshal(b, m, deterministic)
}
func (m *PDFParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFParams.Merge(m, src)
}
func (m *PDFParams) XXX_Size() int {
	return xxx_messageInfo_PDFParams.Size(m)
}
func (m *PDFParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFParams.DiscardUnknown(m)
}

var xxx_messageInfo_PDFParams proto.InternalMessageInfo

func (m *PDFParams) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PDFParams) GetDelay() int32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *PDFParams) GetJavascriptReadyFlag() string {
	if m != nil {
		return m.JavascriptReadyFlag
	}
	return ""
}

func (m *PDFParams) GetIsDebug() bool {
	if m != nil {
		return m.IsDebug
	}
	return false
}

func (m *PDFParams) GetIsMarginless() bool {
	if m != nil {
		return m.IsMarginless
	}
	return false
}

func (m *PDFParams) GetIsLandscape() bool {
	if m != nil {
		return m.IsLandscape
	}
	return false
}

type PDFFile struct {
	Binary               []byte   `protobuf:"bytes,1,opt,name=binary,proto3" json:"binary,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PDFFile) Reset()         { *m = PDFFile{} }
func (m *PDFFile) String() string { return proto.CompactTextString(m) }
func (*PDFFile) ProtoMessage()    {}
func (*PDFFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba64ad676e34f5a, []int{2}
}

func (m *PDFFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PDFFile.Unmarshal(m, b)
}
func (m *PDFFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PDFFile.Marshal(b, m, deterministic)
}
func (m *PDFFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFFile.Merge(m, src)
}
func (m *PDFFile) XXX_Size() int {
	return xxx_messageInfo_PDFFile.Size(m)
}
func (m *PDFFile) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFFile.DiscardUnknown(m)
}

var xxx_messageInfo_PDFFile proto.InternalMessageInfo

func (m *PDFFile) GetBinary() []byte {
	if m != nil {
		return m.Binary
	}
	return nil
}

func (m *PDFFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Pong)(nil), "makepdf.Pong")
	proto.RegisterType((*PDFParams)(nil), "makepdf.PDFParams")
	proto.RegisterType((*PDFFile)(nil), "makepdf.PDFFile")
}

func init() {
	proto.RegisterFile("makepdf.proto", fileDescriptor_4ba64ad676e34f5a)
}

var fileDescriptor_4ba64ad676e34f5a = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xd1, 0x6a, 0xea, 0x40,
	0x10, 0x86, 0xcd, 0x31, 0x9a, 0xe3, 0x1c, 0x05, 0x99, 0x73, 0x38, 0x2c, 0x42, 0x21, 0xe4, 0xa2,
	0x78, 0x95, 0x96, 0x96, 0xd2, 0x7b, 0x09, 0xe9, 0x8d, 0xc2, 0x12, 0xe8, 0x03, 0x8c, 0x66, 0x1a,
	0x56, 0x93, 0x4d, 0xd8, 0x55, 0x21, 0x7d, 0xbf, 0xbe, 0x57, 0x49, 0x9a, 0x50, 0x85, 0xde, 0xcd,
	0x37, 0xff, 0xbf, 0xec, 0xcc, 0x3f, 0x30, 0x2b, 0xe8, 0xc0, 0x55, 0xfa, 0x16, 0x56, 0xa6, 0x3c,
	0x96, 0xe8, 0x75, 0x18, 0x08, 0x70, 0x65, 0xa9, 0x33, 0x9c, 0xc3, 0xb0, 0xb0, 0x99, 0x70, 0x7c,
	0x67, 0x39, 0x49, 0x9a, 0x32, 0xf8, 0x70, 0x60, 0x22, 0xa3, 0x58, 0x92, 0xa1, 0xc2, 0x36, 0xfa,
	0xc9, 0xe4, 0xbd, 0x7e, 0x32, 0x39, 0xfe, 0x83, 0x51, 0xca, 0x39, 0xd5, 0xe2, 0x97, 0xef, 0x2c,
	0x47, 0xc9, 0x17, 0xe0, 0x3d, 0xfc, 0xdd, 0xd3, 0x99, 0xec, 0xce, 0xa8, 0xea, 0x98, 0x30, 0xa5,
	0x75, 0x9c, 0x53, 0x26, 0x86, 0xed, 0xbb, 0x9f, 0x24, 0x14, 0xe0, 0x29, 0x1b, 0xf1, 0xf6, 0x94,
	0x09, 0xd7, 0x77, 0x96, 0xbf, 0x93, 0x1e, 0x31, 0x80, 0xa9, 0xb2, 0x1b, 0x32, 0x99, 0xd2, 0x39,
	0x5b, 0x2b, 0x46, 0xad, 0x7c, 0xd5, 0x43, 0x1f, 0xfe, 0x28, 0xbb, 0x26, 0x9d, 0xda, 0x1d, 0x55,
	0x2c, 0xc6, 0xad, 0xe5, 0xb2, 0x15, 0x3c, 0x81, 0x27, 0xa3, 0x38, 0x56, 0x39, 0xe3, 0x7f, 0x18,
	0x6f, 0x95, 0x26, 0x53, 0xb7, 0x7b, 0x4c, 0x93, 0x8e, 0x10, 0xc1, 0xd5, 0x54, 0x70, 0xbb, 0xc9,
	0x24, 0x69, 0xeb, 0x87, 0x3d, 0x78, 0x1b, 0x3a, 0xb0, 0x8c, 0x62, 0xbc, 0x05, 0x57, 0x2a, 0x9d,
	0xe1, 0x2c, 0xec, 0x43, 0x6c, 0x22, 0x5b, 0x5c, 0x63, 0x30, 0xc0, 0x67, 0x98, 0xbd, 0xf0, 0xb1,
	0xf9, 0xcc, 0x94, 0xc5, 0x6b, 0xb2, 0x46, 0xfc, 0x76, 0xf4, 0x41, 0x2e, 0xe6, 0x97, 0xbd, 0x66,
	0xaa, 0x60, 0xb0, 0xba, 0x83, 0x1b, 0xfd, 0x1e, 0xee, 0xca, 0x50, 0xb3, 0x49, 0xeb, 0x70, 0xcf,
	0x7c, 0x66, 0xdb, 0x58, 0x3a, 0xeb, 0x6a, 0xda, 0x8d, 0x22, 0x9b, 0xe3, 0x49, 0x67, 0x3b, 0x6e,
	0xaf, 0xf8, 0xf8, 0x19, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xad, 0x3c, 0x8e, 0xd6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MakePDFClient is the client API for MakePDF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MakePDFClient interface {
	Ping(ctx context.Context, in *Pong, opts ...grpc.CallOption) (*Pong, error)
	GetPDFFromURL(ctx context.Context, in *PDFParams, opts ...grpc.CallOption) (*PDFFile, error)
}

type makePDFClient struct {
	cc grpc.ClientConnInterface
}

func NewMakePDFClient(cc grpc.ClientConnInterface) MakePDFClient {
	return &makePDFClient{cc}
}

func (c *makePDFClient) Ping(ctx context.Context, in *Pong, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/makepdf.MakePDF/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *makePDFClient) GetPDFFromURL(ctx context.Context, in *PDFParams, opts ...grpc.CallOption) (*PDFFile, error) {
	out := new(PDFFile)
	err := c.cc.Invoke(ctx, "/makepdf.MakePDF/GetPDFFromURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MakePDFServer is the server API for MakePDF service.
type MakePDFServer interface {
	Ping(context.Context, *Pong) (*Pong, error)
	GetPDFFromURL(context.Context, *PDFParams) (*PDFFile, error)
}

// UnimplementedMakePDFServer can be embedded to have forward compatible implementations.
type UnimplementedMakePDFServer struct {
}

func (*UnimplementedMakePDFServer) Ping(ctx context.Context, req *Pong) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedMakePDFServer) GetPDFFromURL(ctx context.Context, req *PDFParams) (*PDFFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPDFFromURL not implemented")
}

func RegisterMakePDFServer(s *grpc.Server, srv MakePDFServer) {
	s.RegisterService(&_MakePDF_serviceDesc, srv)
}

func _MakePDF_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakePDFServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/makepdf.MakePDF/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakePDFServer).Ping(ctx, req.(*Pong))
	}
	return interceptor(ctx, in, info, handler)
}

func _MakePDF_GetPDFFromURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PDFParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MakePDFServer).GetPDFFromURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/makepdf.MakePDF/GetPDFFromURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MakePDFServer).GetPDFFromURL(ctx, req.(*PDFParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _MakePDF_serviceDesc = grpc.ServiceDesc{
	ServiceName: "makepdf.MakePDF",
	HandlerType: (*MakePDFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MakePDF_Ping_Handler,
		},
		{
			MethodName: "GetPDFFromURL",
			Handler:    _MakePDF_GetPDFFromURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "makepdf.proto",
}
